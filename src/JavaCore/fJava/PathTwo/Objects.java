package JavaCore.fJava.PathTwo;

public class Objects {
    //Глава 2 "ВСЕ ЯВЛЯЕТСЯ ОБЪЕКТОМ
    //ССЫЛКИ
    /* Почти все в Java является объектом.
    * Вы обращаетесь с любыми данными как с объектом, и поэтому повсюду используется единый последовательный
    * синтаксис.
    * Хотя вы обращаетесь со всеми данными как с объектом, идентификатор, которым вы манипулируете, на самом деле
    * представляет собой ссылку на объект.
    *
    * Телевизор - объект, дистанционный пульт управления - ссылка на объект.
    *
    * Так же пульт может существовать сам по себе, без телевизора. Таким образом, сам факт наличия ссылки
    * еще не значит наличия объекта присоединенного к ней.
    *
    * Пример - String s;
    *
    * Создана ссылка, но не объект. При послании сообщений к s (вызове методов) произойдет ошибка.
    * Соответственно, безопаснее инициализировать ссылки при их создании.
    *
    * String s = "Hello, World!";
    */
    //ВСЕ ОБЪЕКТЫ ДОЛЖНЫ СОЗДАВАТЬСЯ ЯВНО
    /*
    * String s = new String("Hello, World!");
    * Это не только значит "Предоставьте мне новый объект String", но так же указывает как создать строку
    * посредством передачи начального набора символов.
    *
    * */
    //ГДЕ ХРАНЯТСЯ ДАННЫЕ
    /* Полезно отчетливо представлять, что происходит во время работы программы, и в частности,
    как данные размещаются в памяти. Существует пять разных мест для хранения данных.
    1) Регистры.
    2) Стек.
    3) Куча.
    4) Постоянное хранилище.
    5) Внешнее хранилище.

    Регистры - Это самое быстрое хранилище, потому что данные хранятся прямо внутри процессора.
    У вас нет прямого доступа к регистрам, вы не найдете ни малейших следов их поддержки в языке.

    Стек - Эта область хранения данных находится в общей оперативной памяти (RAM), но процессор
    предоставляет прямой доступ к ней с использованием указателя стека.
    Указатель стека перемещается вниз для выделения памяти или вверх для ее освобождения.
    Во время выполнения программы компилятор должен знать жизненный цикл объекта.
    Объекты не хранятся в стеке. Только ссылки и некоторые данные.
    Чрезвычайно быстрый и эффективный способ размещения данных.

    Куча - Пул памяти общего назначения (находится так же в RAM), в котором размещаются все объекты.
    Преимущество кучи в том, что компилятору необязательно знать как долго просуществуют находящиеся там объекты.
    Таким образом получаем преимущество в гибкости.
    Когда мы создаем новый объект используя ключевое слово new, в куче выделяется область памяти под него.

    Постоянное хранилище - Значения констант часто встраиваются прямо в код программы, тк они неизменны.
    Иногда такие данные могут размещаться в постоянной памяти (ORM).

    Внешнее хранилище - Если данные хранятся вне программы, они могут существовать и тогда, когда она не
    выполняется.
    * */
    //ОСОБЫЙ СЛУЧАЙ: ПРИМЕТИВНЫЕ ТИПЫ
    /*
    Одна из групп типов, часто применяемых при программировании, требует особого обращения.
    При создании объекта с помощью new - особенно маленькой, простой переменной - недостаточно
    эффективно, так как new помещает объекты в кучу. В таких случаях Java создает "автоматическую" переменную,
    не являющейся ссылкой. Переменная напрямую хранит значение и размещается в стеке.

    В Java размеры всех переменных строго фиксированны.
    (более подробно разобрал в пакете JavaCore.dataType)



    */
}
