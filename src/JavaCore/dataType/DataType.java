package JavaCore.dataType;

//https://skillbox.ru/media/base/tipy-dannykh-v-java/

public class DataType {
    //Типы данных в Java
    //Одной из основных особенностей Java является то, что данный язык является строго типизированным.
    //А это значит, что каждая переменная и константа представляет определенный тип и данный тип строго определен.
    // Тип данных определяет диапазон значений, которые может хранить переменная или константа.

    public static void main(String[] args) {
        //В Java типы данных делят на две большие группы: примитивные и ссылочные.
        // В состав примитивных типов (или просто примитивов) входят четыре подвида и восемь типов данных:
        //1) целые числа (byte, short, int, long);
        //2) числа с плавающей точкой (float, double);
        //3) логический (boolean);
        //4) символьный (char).

        byte by = 2; // хранит целое число от -128 до 127 и занимает 1 байт
        short sh = 3; // хранит целое число от -32768 до 32767 и занимает 2 байта
        int in = 4; // хранит целое число от -2147483648 до 2147483647 и занимает 4 байта
        long lon = 10; //  хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт
        float fl = 43.3f; //хранит число с плавающей точкой от -3.4*10^38 до 3.4*10^38 и занимает 4 байта
        double dou = 43.32; // хранит число с плавающей точкой от ±4.9*10^-324 до ±1.8*10^308 и занимает 8 байт

        boolean bol = true; //true false
        char ch = 'A'; //хранит одиночный символ в кодировке UTF-16 и занимает 2 байта, поэтому диапазон хранимых значений от 0 до 65535

        //Ссылочные типы данных ещё называют ссылками. К ним относятся все классы, интерфейсы, массивы,
        //а также тип данных String.
        //Примитивы, хранят значения, а ссылки хранят ссылку на объект в памяти.

        //Так же есть классы обертки для примитивов.
        Integer integer = in; //записали объявленный выше int в Integer
        Short sho = sh;
        //и.т.д.

        //Классы-обёртки полезны, когда нужно одновременно работать и с числами, и с объектами — например,
        // в коллекциях.

        //Еще есть строки, массивы и другие коллекции. Они уже хранят ссылку на объект в памяти.
        String newString = "Hello world!";
        int[] newArray = new int[4];

    }
}
